name: Model Conversion Workflow

permissions:
  contents: write

on:
  workflow_dispatch:
    inputs:
      model_url:
        description: '模型下载URL (支持任意Git仓库/HuggingFace/压缩包URL)'
        required: true
      export_format:
        description: '导出格式 (例如: mnn)'
        required: true
        default: 'mnn'
      quant_bit:
        description: '量化位数'
        required: true
        default: '4'
      quant_block:
        description: '量化块大小'
        required: true
        default: '128'

jobs:
  convert_model:
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup system tools
      run: |
        sudo apt-get update
        sudo apt-get install -y wget unzip git

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'

    - name: Cache pip packages
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Extract model info
      id: model_info
      env:
        MODEL_URL: ${{ github.event.inputs.model_url }}
      run: |
        set -eo pipefail
        
        if [[ -z "$MODEL_URL" ]]; then
          echo "Error: Empty model URL"
          exit 1
        fi
        
        if [[ $MODEL_URL == *"huggingface.co"* ]]; then
          MODEL_NAME=$(echo "$MODEL_URL" | sed -n 's|.*huggingface\.co/\([^/]\{1,\}/[^/]\{1,\}\).*|\1|p')
          [ -z "$MODEL_NAME" ] && MODEL_NAME=$(echo "$MODEL_URL" | awk -F/ '{print $(NF-1)"/"$NF}')
          echo "Source type: HuggingFace"
        elif [[ $MODEL_URL == *.git ]] || [[ $MODEL_URL == *"/tree/"* ]] || [[ $MODEL_URL == *"/blob/"* ]]; then
          MODEL_NAME=$(echo "$MODEL_URL" | awk -F/ '{print $(NF-1)"/"$NF}' | sed 's/\.git$//')
          echo "Source type: Git Repository"
        elif [[ $MODEL_URL == *.zip ]] || [[ $MODEL_URL == *.tar.gz ]] || [[ $MODEL_URL == *.tgz ]]; then
          MODEL_NAME=$(basename "$MODEL_URL" | sed 's/\.[^.]*$//')
          echo "Source type: Archive"
        else
          echo "Warning: Unrecognized URL format, attempting to treat as git repository"
          MODEL_NAME=$(basename "$MODEL_URL" | sed 's/\.git$//')
          echo "Source type: Unknown (treating as git)"
        fi
        
        echo "Extracted model name: ${MODEL_NAME}"
        echo "MODEL_NAME=${MODEL_NAME}" >> $GITHUB_ENV
        echo "REPO_ID=${MODEL_NAME}" >> $GITHUB_ENV
        echo "model_name=${MODEL_NAME}" >> $GITHUB_OUTPUT

    - name: Configure swap space
      run: |
        sudo swapoff /swapfile || true
        sudo rm -f /swapfile
        sudo fallocate -l 8G /swapfile
        sudo chmod 600 /swapfile
        sudo mkswap /swapfile
        sudo swapon /swapfile
        free -h

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install torch transformers accelerate llmexport tqdm
        pip install "mnn>=2.0.0"
        pip install huggingface_hub

    - name: Download model
      env:
        HF_TOKEN: ${{ secrets.HUGGINGFACE_TOKEN }}
      run: |
        set -x
        mkdir -p ${{ github.workspace }}/models
        cd ${{ github.workspace }}/models
        
        download_status=0
        
        if [[ $MODEL_URL == *"huggingface.co"* ]]; then
          echo "Downloading from HuggingFace..."
          huggingface-cli download ${{ env.REPO_ID }} \
            --cache-dir . \
            --token $HF_TOKEN \
            --resume-download \
            --local-dir ${{ env.MODEL_NAME }} || download_status=$?
        elif [[ $MODEL_URL == *.zip ]]; then
          echo "Downloading zip archive..."
          wget -q ${{ github.event.inputs.model_url }} -O model.zip && \
          unzip -q model.zip -d ${{ env.MODEL_NAME }} || download_status=$?
        elif [[ $MODEL_URL == *.tar.gz ]] || [[ $MODEL_URL == *.tgz ]]; then
          echo "Downloading tar archive..."
          wget -q ${{ github.event.inputs.model_url }} -O model.tar.gz && \
          tar xzf model.tar.gz -C ${{ env.MODEL_NAME }} || download_status=$?
        else
          echo "Attempting to clone repository..."
          git clone --depth 1 ${{ github.event.inputs.model_url }} ${{ env.MODEL_NAME }} || download_status=$?
        fi
        
        if [ $download_status -ne 0 ]; then
          echo "Error: Failed to download model"
          exit 1
        fi
        
        if [ ! -d "${{ env.MODEL_NAME }}" ]; then
          echo "Error: Model directory not found after download"
          exit 1
        fi

    - name: Convert model
      run: |
        set -x
        cd ${{ github.workspace }}/models
        
        if [ ! -d "${{ env.MODEL_NAME }}" ]; then
          echo "Error: Model directory not found"
          exit 1
        fi
        
        mkdir -p ./converted
        
        llmexport --path ${{ env.MODEL_NAME }} \
                 --export ${{ github.event.inputs.export_format }} \
                 --quant_bit ${{ github.event.inputs.quant_bit }} \
                 --quant_block ${{ github.event.inputs.quant_block }} \
                 --dst_path ./converted

        if [ ! -d "./converted" ]; then
          echo "Error: Conversion failed - output directory not created"
          exit 1
        fi

    - name: Archive converted model
      run: |
        cd ${{ github.workspace }}/models/converted
        
        mkdir -p package_temp
        
        cp config.json package_temp/ || true
        cp *.bin package_temp/ || true
        cp llm.mnn* package_temp/ || true
        cp llm_config.json package_temp/ || true
        cp tokenizer.txt package_temp/ || true
        
        cd package_temp
        
        tar -czvf ../${{ env.MODEL_NAME }}.tar.gz *
        
        if [ ! -f ../${{ env.MODEL_NAME }}.tar.gz ]; then
          echo "Error: Failed to create archive"
          exit 1
        fi
        
        cd ..
        rm -rf package_temp

    - name: List files in archive
      id: list_files
      run: |
        tar -tzf ${{ env.MODEL_NAME }}.tar.gz > file_list.txt
        cat file_list.txt

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: converted-${{ env.MODEL_NAME }}
        path: ${{ github.workspace }}/models/converted/${{ env.MODEL_NAME }}.tar.gz
        retention-days: 7

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: "release-${{ env.MODEL_NAME }}-${{ github.run_number }}"
        name: "${{ env.MODEL_NAME }} ${{ github.event.inputs.export_format }} Model"
        body: |
          Conversion Details:
          - Source: [${{ github.event.inputs.model_url }}](${{ github.event.inputs.model_url }})
          - Format: ${{ github.event.inputs.export_format }}
          - Quantization: ${{ github.event.inputs.quant_bit }}bit
          - Block Size: ${{ github.event.inputs.quant_block }}
          - Build: ${{ github.run_number }}
          - Archive Contents:
          $(cat file_list.txt)
        files: |
          ${{ github.workspace }}/models/converted/${{ env.MODEL_NAME }}.tar.gz
        draft: false
        prerelease: false

    - name: Cleanup resources
      if: always()
      run: |
        sudo swapoff /swapfile
        sudo rm -f /swapfile
        rm -rf ${{ github.workspace }}/models
